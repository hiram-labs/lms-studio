---

---

<a id="apk-install-cta" href="#" class="btn btn-neutral w-full">
    Install APK
</a>

<script>
    import type {  } from "@yume-chan/stream-extra";
    import AdbWebCredentialStore from "@yume-chan/adb-credential-web";
    import { type PackageManagerInstallOptions, PackageManager } from "@yume-chan/android-bin";
    import { type AdbPacketData,type AdbPacketInit, Adb, AdbDaemonTransport } from "@yume-chan/adb";
    import { AdbDaemonWebUsbDeviceManager, AdbDaemonWebUsbDevice } from "@yume-chan/adb-daemon-webusb";
    import { type ReadableStream, type ReadableWritablePair, Consumable, TextDecoderStream, WritableStream } from "@yume-chan/stream-extra";

    import { OPERATION_TIMED_OUT_ERROR_MESSAGE, wrapPromiseWithTimeout, fetchApkFileWithProgress } from "../libs/utils"

    const AUTH_TIMEOUT = 10000
    // const PIPE_APP_APK_DOWNLOAD_PATH = "/sdcard/Download/pipe.app.apk"
    const PIPE_APP_APK_URL = "https://cdn.metal.hiramlabs.com/public/xrtemis-pipe-app.apk"
    const cta = document.getElementById("apk-install-cta");

    if(cta) {
        cta.addEventListener('click', async (e: Event) => {
            e.preventDefault();

            const manager: AdbDaemonWebUsbDeviceManager | undefined = AdbDaemonWebUsbDeviceManager.BROWSER;
            if (!manager) {
                alert("WebUSB is not supported in this browser!");
                return;
            }

            const device: AdbDaemonWebUsbDevice | undefined = await manager.requestDevice();
            if (!device) {
                alert("No device selected");
                return;
            }

            try {
                const connection: ReadableWritablePair<AdbPacketData, Consumable<AdbPacketInit>> = await device.connect();
                const credentialStore: AdbWebCredentialStore = new AdbWebCredentialStore()
                // await credentialStore.generateKey()
                const transport: AdbDaemonTransport = await wrapPromiseWithTimeout(
                    AdbDaemonTransport.authenticate({ serial: device.serial, connection, credentialStore }),
                    AUTH_TIMEOUT,
                    () => {} // TODO: add loading indicator
                );

                const {fileSize, file} = await fetchApkFileWithProgress(
                    PIPE_APP_APK_URL,
                    () => {} // TODO: add progress indicator
                )

                const adb: Adb = new Adb(transport);

                // const sync = await adb.sync()
                // await sync.write({ filename: PIPE_APP_APK_DOWNLOAD_PATH, file});
                // await sync.dispose()

                const pm = new PackageManager(adb);
                await pm.installStream(fileSize, file)

                // const process = await adb.subprocess.spawn("ls -la");
                // await process.stdout.pipeThrough(new TextDecoderStream()).pipeTo(
                // new WritableStream<string>({
                //         write(chunk) {
                //         console.log(chunk);
                //         },
                //     }),
                // );

                // await adb.rm(PIPE_APP_APK_DOWNLOAD_PATH);
                adb.close()
            } catch (error) {
                if (typeof error === "object" && error !== null && "name" in error && error.name === "NetworkError") {
                    alert("The device is already in use by another program.\n" +
                        "Please close the program and try again.");
                }
                if (typeof error === "string" && error === OPERATION_TIMED_OUT_ERROR_MESSAGE) {
                    alert("Authentication timed out. Please ensure that:\n\n" +
                        "- Developer Mode is enabled on the device.\n" +
                        "- USB Debugging is enabled.\n\n" +
                        "If both are already enabled, check the USB connection and try again.")
                }
                if (typeof error === "string" && error.startsWith("APKFetchError:")) {
                    alert("There was an issue trying to download and install the APK file.\n" +
                        "Please report this to the webmaster")
                }
                throw error;
            } finally {
                (await manager.getDevices()).map(device => device.raw.forget())
            }
        });
    };
</script>